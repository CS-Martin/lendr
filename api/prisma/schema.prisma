generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    address   String    @id
    username  String?
    avatarUrl String?
    bio       String?
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    nfts        NFT[]
    bids        Bid[]        @relation("Bidder")
    rentals     Rental[]     @relation("Renter")
    rentalPosts RentalPost[]
}

model NFT {
    address        String  @id
    userAddress    String
    title          String
    imageUrl       String
    description    String?
    category       String?
    floorPrice     Float?
    collectionName String?

    owner     User             @relation(fields: [userAddress], references: [address])
    postItems RentalPostItem[]
}

enum RentalListingStatus {
    AVAILABLE
    RENTED
    DELISTED
    DISPUTED_FOR_LENDER
    DISPUTED_FOR_RENTER
}

model RentalPost {
    rentalPostId     Int                 @id @default(autoincrement())
    posterAddress    String
    name             String
    description      String?
    hourlyRate       Float
    collateral       Float
    isBiddable       Boolean
    biddingStarttime DateTime?
    biddingEndtime   DateTime?
    isActive         Boolean
    statusCode       RentalListingStatus @default(AVAILABLE)
    createdAt        DateTime            @default(now())
    updatedAt        DateTime?           @updatedAt

    poster  User             @relation(fields: [posterAddress], references: [address])
    items   RentalPostItem[]
    bids    Bid[]
    rentals Rental[]
}

model RentalPostItem {
    rentalPostId Int
    nftAddress   String

    post RentalPost @relation(fields: [rentalPostId], references: [rentalPostId])
    nft  NFT        @relation(fields: [nftAddress], references: [address])

    @@id([rentalPostId, nftAddress])
}

model Rental {
    rentalId      Int      @id @default(autoincrement())
    renterAddress String
    rentalPostId  Int
    bidId         Int?     @unique
    amount        Float
    duration      Int
    startDatetime DateTime
    endDatetime   DateTime

    renter User             @relation("Renter", fields: [renterAddress], references: [address])
    post   RentalPost       @relation(fields: [rentalPostId], references: [rentalPostId])
    bid    Bid?             @relation("BidToRental", fields: [bidId], references: [bidId])
    txHash TransactionHash?
}

model Bid {
    bidId             Int       @id @default(autoincrement())
    rentalPostId      Int
    bidderAddress     String
    message           String?
    hourlyRate        Float
    rentalDuration    Int
    isAccepted        Boolean
    acceptedTimestamp DateTime?
    createdAt         DateTime
    updatedAt         DateTime?

    post   RentalPost @relation(fields: [rentalPostId], references: [rentalPostId])
    bidder User       @relation("Bidder", fields: [bidderAddress], references: [address])
    rental Rental?    @relation("BidToRental")
}

model TransactionHash {
    transactionHash String @id
    rentalId        Int    @unique

    rental Rental @relation(fields: [rentalId], references: [rentalId])
}
